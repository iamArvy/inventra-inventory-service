// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id           String      @id @default(uuid())
  name         String
  description  String
  image        String?
  sku          String
  basePrice    Decimal     @db.Decimal(10, 2)
  enterpriseId String
  categoryId   String
  category     Category    @relation(fields: [categoryId], references: [id])
  tags         String[]
  attributes   Json?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
  inventories  Inventory[]

  @@unique([sku, enterpriseId])
  @@index([deletedAt, categoryId, enterpriseId])
  @@map("products")
}

model Category {
  id           String    @id @default(cuid())
  name         String
  description  String?
  image        String?
  enterpriseId String
  products     Product[]
  createdAt    DateTime  @default(now())

  @@unique([name, enterpriseId])
  @@index([enterpriseId])
  @@map("categories")
}

model Store {
  id           String      @id @default(cuid())
  enterpriseId String
  name         String
  address      String
  createdAt    DateTime    @default(now())
  deletedAt    DateTime?
  inventory    Inventory[]

  @@unique([name, enterpriseId])
  @@index([enterpriseId])
  @@map("stores")
}

model Inventory {
  id           String          @id @default(uuid())
  enterpriseId String
  productId    String
  product      Product         @relation(fields: [productId], references: [id])
  storeId      String
  store        Store           @relation(fields: [storeId], references: [id])
  price        Decimal?        @db.Decimal(10, 2)
  quantity     Int             @default(0)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  deletedAt    DateTime?
  movements    StockMovement[]

  @@unique([productId, storeId])
  @@index([productId])
  @@index([storeId])
  @@map("inventories")
}

model StockMovement {
  id           String       @id @default(uuid())
  inventoryId  String
  inventory    Inventory    @relation(fields: [inventoryId], references: [id])
  enterpriseId String
  quantity     Int
  type         MovementType
  reason       String
  createdAt    DateTime     @default(now())

  @@index([inventoryId, type])
  @@index([inventoryId, createdAt])
  @@index([inventoryId, createdAt, type])
  @@map("inventory_movements")
}

enum MovementType {
  INCREASE
  DECREASE
}
